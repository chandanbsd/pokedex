package main

import (
	"bufio"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"
	"strings"
)

type cliCommand struct {
	name        string
	description string
	callback    func() error
	config      *config
}

type config struct {
	Next     *string
	Previous *string
}

var c *config = &config{
	Previous: nil,
	Next:     nil,
}

type result struct {
	Name string `json:"name"`
	Url  string `json:"url"`
}

type locationArea struct {
	Count    int     `json:"count"`
	Next     *string `json:"next"`
	Previous *string `json:"previous"`
	Results  []struct {
		Name string `json:"name"`
		URL  string `json:"url"`
	} `json:"results"`
}

type AutoGenerated struct {
	Count    int    `json:"count"`
	Next     string `json:"next"`
	Previous any    `json:"previous"`
	Results  []struct {
		Name string `json:"name"`
		URL  string `json:"url"`
	} `json:"results"`
}

var commands map[string]cliCommand

func init() {
	commands = map[string]cliCommand{
		"map": {
			name:        "map",
			description: "Lists the locations",
			callback:    commandLocationAreaNext,
			config:      c,
		},
		"mapb": {
			name:        "mapb",
			description: "Lists the locations back",
			callback:    commandLocationAreaPrevious,
			config:      c,
		},
		"help": {
			name:        "help",
			description: "Displays a help message",
			callback:    commandHelp,
			config:      c,
		},
		"exit": {
			name:        "exit",
			description: "Exit the Pokedex",
			callback:    commandExit,
			config:      c,
		},
	}
}

func main() {

	var word string
	scanner := bufio.NewScanner(os.Stdin)

	var cleanedSlice []string
	for true {
		fmt.Printf("Pokedex > ")
		isComplete := scanner.Scan()

		if isComplete {
			word = scanner.Text()
			cleanedSlice = cleanInput(word)

			if len(cleanedSlice) > 0 {
				commandStr := cleanedSlice[0]

				command, ok := commands[commandStr]

				if !ok {
					fmt.Println("Unknown command")
				} else {
					command.callback()
				}
			}

		}

	}
}

func commandExit() error {
	fmt.Println("Closing the Pokedex... Goodbye!")
	os.Exit(0)
	return nil
}

func commandHelp() error {

	fmt.Println("Welcome to the Pokedex!\nUsage: \n")

	for _, command := range commands {
		fmt.Printf("%s: %s\n", command.name, command.description)
	}
	return nil
}

func commandLocationAreaNext() error {

	config := commands["map"].config

	basedUrl := "https://pokeapi.co/api/v2/location-area/"

	if config.Next == nil {
		config.Next = &basedUrl
	}

	client := &http.Client{}

	req, err := http.NewRequest("GET", *config.Next, nil)
	if err != nil {
		return err
	}
	req.Header.Set("Accept", "application/json")

	res, err := client.Do(req)
	if err != nil {
		return err
	}
	defer res.Body.Close()

	var locationArea locationArea

	//decoder := json.NewDecoder(res.Body)

	//err = decoder.Decode(&locationArea)

	reader, err := io.ReadAll(res.Body)

	err = json.Unmarshal(reader, &locationArea)
	if err != nil {
		return err
	}

	config.Previous = config.Next
	config.Next = locationArea.Next

	for _, res := range locationArea.Results {
		fmt.Println(res.Name)
	}

	return nil
}

func commandLocationAreaPrevious() error {

	config := commands["map"].config

	basedUrl := "https://pokeapi.co/api/v2/location-area/"
	config.Next = &basedUrl

	if config.Previous == nil {
		fmt.Println("you're on the first page")
		return nil
	}

	client := &http.Client{}

	req, err := http.NewRequest("GET", *config.Next, nil)
	if err != nil {
		return err
	}
	req.Header.Set("Accept", "application/json")

	res, err := client.Do(req)
	if err != nil {
		return err
	}
	defer res.Body.Close()

	var locationArea locationArea

	//decoder := json.NewDecoder(res.Body)

	//err = decoder.Decode(&locationArea)

	reader, err := io.ReadAll(res.Body)

	err = json.Unmarshal(reader, &locationArea)
	if err != nil {
		return err
	}

	config.Previous = locationArea.Previous
	config.Next = config.Previous

	for _, res := range locationArea.Results {
		fmt.Println(res.Name)
	}

	return nil
}

func cleanInput(text string) []string {
	res := strings.Fields(text)

	values := []string{}

	for _, s := range res {
		values = append(values, strings.ToLower(s))
	}

	return values
}
